package com.collection.assignment;


import java.util.Comparator;
import java.util.Scanner;
import java.util.TreeSet;


public class Collection_3 {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);

	
   
		TreeSet<Employee> emp = null;
		
		System.out.println("Sort by a)Id b)Name c)Department d)Salary");
		char choice=sc.next().charAt(0);
		switch(choice) {
		case 'a': emp= new TreeSet<>(new sortId());
					break;
					
		case 'b': emp=new TreeSet<>(new sortName());
					break;
					
		case 'c':emp=new TreeSet<>(new sortDepartment());
					break;
					
		case 'd':emp=new TreeSet<>(new sortSalary());
					break;
					
		default: System.out.println("End");
		}
		
		emp.add(new Employee(5,"Shyam","Development",22500));
		emp.add(new Employee(2,"Prakshit","Testing",22000)); 
		emp.add(new Employee(9,"Sagar","Hr",20000));
		emp.add(new Employee(4,"Saurav","Hr",21000));
		emp.add(new Employee(1,"Pratik","Development",23000));
		emp.add(new Employee(10,"Raj","Testing",25000));
		emp.add(new Employee(7,"Sumit","Hr",21500));
		emp.add( new Employee(8,"Rajat","Testing",25500));
		emp.add(new Employee(3,"Ajay","Development",24000));
		emp.add(new Employee(6,"Vivek","Development",23500));
		
		for(Employee em:emp) {
			System.out.println(em);
		}
	}

}
class Employee{
	private int id;
	private String name;
	private String department;
	private int salary;
	public	Employee(int id,String name,String department,int salary){
		 this.id=id;
		 this.name=name;
		 this.salary=salary;
		 this.department=department;
		}
	public  int getId() {
		return id;
	}
	
	public String getName() {
		return name;
	}
	
	public String getDepartment() {
		return department;
	}
	
	public int getSalary() {
		return salary;
	}
	@Override
	public String toString() {
		return "EmployeeDetails: [ID: "+id+", Name: "+name+", Department: "+department+", Salary: "+salary+"]";
	}
	
}
class sortId implements Comparator<Employee>{

	@Override
	public int compare(Employee o1, Employee o2) {
	return o1.getId()-o2.getId();
	}	
}
class sortName implements Comparator<Employee>{

	@Override
	public int compare(Employee o1, Employee o2) {
		return o1.getName().compareTo(o2.getName());
	}
	
}
class sortSalary implements Comparator<Employee>{

	@Override
	public int compare(Employee o1, Employee o2) {
		return (int)(o1.getSalary()-o2.getSalary());
	}
	
}
class sortDepartment implements Comparator<Employee>{

	@Override
	public int compare(Employee o1, Employee o2) {
		return o1.getDepartment().compareTo(o2.getDepartment());
	}
	
}

